<div class="card-columns">
@foreach (var user in GetUsers())
{
    <div class="card">
        <div class="card-img" style="background-image: url('/images/users/@user.Image');"></div>
        <h5 class="card-header">@user.Name</h5>
        <h6 class="card-text">@user.Balance</h6>
        <div class="card-footer">
          <small class="text-muted">
            <button @onclick="(e => SelectUser(user))" data-toggle="modal" data-target="#userModal" class="btn btn-primary">More Info</button>
          </small>
        </div>
    </div>
}
</div>

@if(selectedUser != null)
{
  <div class="modal fade" id="userModal" tabindex="-1" role="dialog" aria-labelledby="userTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="name">@selectedUser.Name</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="card">
            <div class="card-img" style="background-image: url('/images/users/@selectedUser.Image');">
            </div>
            <div class="card-body">
              <p class="card-text">Name is @selectedUser.Name</p>
              <p class="card-text">Password is @selectedUser.Password</p>
            </div>
            <div class="card-footer">
              <small class="text-muted">
                <a class="btn btn-primary" href='Home/LogIn?name=@System.Net.WebUtility.UrlEncode(selectedUser.Name)'>Log In</a>
              </small>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
}

@code 
{
  UserDTO selectedUser = new UserDTO();

  void SelectUser(UserDTO user)
    {
    selectedUser = user;
    }
    
  IEnumerable<UserDTO> GetUsers()
  {
    var handler = new HttpClientHandler {ServerCertificateCustomValidationCallback = (requestMessage, certificate, chain, policyErrors) => true};


    using var httpClient = new HttpClient(handler);
    using var request = new HttpRequestMessage(new HttpMethod("GET"), $"{NavigationManager.BaseUri}Users/GetUsers/");
    var multipartContent = new MultipartFormDataContent {{new StringContent(Configuration["apiKey"]), "apiKey"}};
    request.Content = multipartContent;

    var response = httpClient.Send(request);
        
    response.EnsureSuccessStatusCode();

    using var streamReader = new StreamReader(response.Content.ReadAsStream());

    return JsonSerializer.Deserialize<UserDTO[]>(streamReader.ReadToEnd(), new JsonSerializerOptions{PropertyNameCaseInsensitive = true});
  }
}